# Datahub Deployment AWS

AWSTemplateFormatVersion: "2010-09-09"
Description: Master template that set up DataHub Platform in AWS
Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        - Label:
            default: Nested CFN Templates Location
          Parameters:
            - TemplateBucketName
            - Environment
        - Label:
            default: New VPC Stack Configuration
          Parameters:
            - CreateVPC
            - VPCCIDR
            - AvailabilityZones
            - PrivateSubnet1CIDR
            - PrivateSubnet2CIDR
            - PrivateSubnet3CIDR
            - PublicSubnet1CIDR
            - PublicSubnet2CIDR
            - PublicSubnet3CIDR
        - Label:
            default: Existing VPC Configuration (leave it alone when creating New VPC)
          Parameters:
            - VPCID
            - PrivateSubnet1ID
            - PrivateSubnet2ID
            - PrivateSubnet3ID
            - PublicSubnet1ID
            - PublicSubnet2ID
            - PublicSubnet3ID
        - Label:
            default: ElasticSearch Stack Configuration
          Parameters:
            - CreateElasticSearch
            - ESDataNodeCount
            - ESInstanceType
            - ESVolumeSize
            - ESMasterNodeCount
            - ESMasterInstanceType
            - ElasticsearchVersion
        - Label:
            default: MySQL Stack Configuration
          Parameters:
            - CreateMySQL
            - DBInstanceClass
            - EngineVersion
        - Label:
            default: MSK Stack Configuration
          Parameters:
            - CreateMSK
            - KafkaVersion
            - MSKInstanceType
        - Label:
            default: EKS Control Panel Configuration
          Parameters:
            - CreateEKS
            - ProvisionInstanceType
            - EksMgmtIamRoleArn
            #- EksExternalUser
            - KubernetesVersion
        - Label:
            default: EKS Node Group Configuration
          Parameters:
            - NodeInstanceType
            - MaxNumberOfNodes
            - MinNumberOfNodes
            - DesiredNumberOfNodes
            - EKSNodeVolumeSize
        - Label:
            default: Ingress Controller Stack Configuration
          Parameters:
            - ControllerHostNetwork
        - Label:
            default: Admin Stack Configuration
          Parameters:
            - CreateAdmin
            - DomainName
            - KotsDomainName
            - KotsAdmNLBScheme
            - ProvisionInstanceType
            - ElbCertArn 
            - ElbInboundCIDRs
            - Application
            - ApplicationReleaseChannel
        - Label:
            default: PrivateLink Stack Configuration
          Parameters:
            - CreatePrivateLink
        - Label:
            default: Remove Temp Resources
          Parameters:
            - RemoveTempResources

      ParameterLabels:
        ### Existing VPC 
        VPCID:
          Default: The Existing VPC ID
        PrivateSubnet1ID:
          Default: The Existing Private Subnet 1 ID
        PrivateSubnet2ID:
          Default: The Existing Private Subnet 2 ID
        PrivateSubnet3ID:
          Default: The Existing Private Subnet 3 ID
        PublicSubnet1ID:
          Default: The Existing Public Subnet 1 ID
        PublicSubnet2ID:
          Default: The Existing Public Subnet 2 ID
        PublicSubnet3ID:
          Default: The Existing Public Subnet 3 ID

        ### New VPC 
        AvailabilityZones:
          default: The AZ's to deploy to.
        PrivateSubnet1CIDR:
          default: The CIDR block for the first private subnet
        PrivateSubnet2CIDR:
          default: The CIDR block for the second private subnet
        PrivateSubnet3CIDR:
          default: The CIDR block for the third private subnet
        PublicSubnet1CIDR:
          default: The CIDR block for the first public subnet
        PublicSubnet2CIDR:
          default: The CIDR block for the second public subnet
        PublicSubnet3CIDR:
          default: The CIDR block for the third public subnet
        ProvisionInstanceType:
          default: The instance type to deploy Provision to
        NodeInstanceType:
          default: The instance type to deploy EKS Worker Node to
        MaxNumberOfNodes:
          default: The maximum number of nodes to scale up to for each EKS Worker Node Group
        MinNumberOfNodes:
          default: The minimum number of nodes to scale down to for each EKS Worker Node Group
        DesiredNumberOfNodes:
          default: The desired number of nodes to keep running for each EKS Worker Node Group
        EKSNodeVolumeSize:
          default: The Volume size of EKS Worker Node
        TemplateBucketName:
          default: The name of the S3 bucket that holds the templates
        Environment:
          default: The Environment Prefix
        EksMgmtIamRoleArn:
          default: The AWS IAM Role arn that will be allowed to manage EKS. Note do not include path just name of role like "my-role"
        KubernetesVersion:
          default: The Kubernetes Version
        CreateElasticSearch:
          default: Enable Creation of ElasticSearch
        CreateVPC:
          default: Enable Creation of VPC
        CreateMSK:
          default: Enable Creation of MSK
        CreateMySQL:
          default: Enable Creation of Aurora RDS
        CreateEKS:
          default: Enable Creation of EKS
        CreateAdmin:
          default: Enable Creation of Admin
        CreatePrivateLink:
          default: Enable Creation of PrivateLink
        RemoveTempResources:
          default: Enable Deletion of Temp Resources
        ESDataNodeCount:
          default: ES Data Node Instance Count 
        ESMasterNodeCount:
          default: ES Master Node Instance Count 
        ESInstanceType:
          default: The ElasticSearch Data Node Instance Type
        ESVolumeSize:
          default: The ElasticSearch Data Node Volume Size
        ESMasterInstanceType:
          default: The ElasticSearch Master Node Instance Type
        ElasticsearchVersion:
          default: The ElasticSearch Version
        DBInstanceClass:
          default: Aurora Instance Type
        EngineVersion:
          default: Aurora Engine Version
        KafkaVersion:
          default: Kafka Version
        MSKInstanceType:
          default: MSK Instance Type
        ControllerHostNetwork:
          default: Deploy EKS load balancer controller
        ElbCertArn:
          default: ELB cert arn
        ElbInboundCIDRs:
          default: ALB Inbound CIDRs
        DomainName:
          default: DataHub Domain Name
        KotsDomainName:
          default: Kots Admin Domain Name
        KotsAdmNLBScheme:
          default: Kots Admin Load Balancer Scheme
        Application:
          default: Application Name
        ApplicationReleaseChannel:
          default: Application Release Channel

Parameters:
    ### Existing VPC 
    VPCID: 
      Default: "vpc-1234" 
      Type: String
    PrivateSubnet1ID: 
      Default: "subnet-01" 
      Type: String
    PrivateSubnet2ID: 
      Default: "subnet-02" 
      Type: String
    PrivateSubnet3ID: 
      Default: "subnet-03" 
      Type: String
    PublicSubnet1ID: 
      Default: "subnet-04" 
      Type: String
    PublicSubnet2ID: 
      Default: "subnet-05" 
      Type: String
    PublicSubnet3ID: 
      Default: "subnet-06" 
      Type: String

    ### New VPC 
    AvailabilityZones:
      Description: "List of Availability Zones to use for the subnets in the VPC. Please choose three zones."
      Type: "List<AWS::EC2::AvailabilityZone::Name>"
    PrivateSubnet1CIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
      Default: "10.0.0.0/23"
      Description: "CIDR block for private subnet 1 located in Availability Zone 1"
      Type: "String"
    PrivateSubnet2CIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
      Default: "10.0.2.0/23"
      Description: "CIDR block for private subnet 2 located in Availability Zone 2"
      Type: "String"
    PrivateSubnet3CIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
      Default: "10.0.4.0/23"
      Description: "CIDR block for private subnet 3 located in Availability Zone 3"
      Type: "String"
    PublicSubnet1CIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
      Default: "10.0.100.0/24"
      Description: "CIDR block for the public (DMZ) subnet 1 located in Availability Zone 1"
      Type: "String"
    PublicSubnet2CIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
      Default: "10.0.102.0/24"
      Description: "CIDR block for the public (DMZ) subnet 2 located in Availability Zone 2"
      Type: "String"
    PublicSubnet3CIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
      Default: "10.0.104.0/24"
      Description: "CIDR block for the public (DMZ) subnet 3 located in Availability Zone 3"
      Type: "String"
    VPCCIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
      Default: "10.0.0.0/16"
      Description: "CIDR block for the VPC"
      Type: "String"
    ProvisionInstanceType:
      Type: "String"
      Default: "t2.micro"
      Description: "The type of EC2 instance to be launched for Provision Host"
      AllowedValues:
        # Add more instance types if needed
        - t2.micro
        - t2.medium
        - t2.large
      ConstraintDescription: "Must contain a valid instance type"
    NodeInstanceType:
      Type: "String"
      Default: "m5.large"
      Description: "The type of EC2 instance to be launched for EKS Worker Node"
      AllowedValues:
        # Add more instance types if needed
        - t2.xlarge
        - t2.2xlarge
        - m3.xlarge
        - m3.2xlarge
        - m4.xlarge
        - m4.2xlarge
        - m5.large
        - m5.xlarge
        - m5.2xlarge
      ConstraintDescription: "Must contain a valid instance type"
    DesiredNumberOfNodes:
      Type: String
      MinLength: 1
      Description: "The desired number of EKS Worker Nodes to run for each group"
      Default: "1"
    EKSNodeVolumeSize:
      Type: String
      Description: "The EKS Worker Node Volume Size in GB"
      Default: "50"
    MaxNumberOfNodes:
      Type: String
      MinLength: 1
      Description: "The maximum number of EKS Worker Nodes to run for each group"
      Default: "1"
    MinNumberOfNodes:
      Type: String
      MinLength: 1
      Description: "The minimum number of EKS Worker Nodes to run for each group"
      Default: "1"
    TemplateBucketName:
      AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
      ConstraintDescription: "Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
      Description: "S3 bucket name that contains the CFN templates (VPC, Provision etc). This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
      Type: "String"
    Environment:
      AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z]*[0-9a-zA-Z])*$"
      Description: "The Environment Prefix"
      Type: "String"
      Default: "dev"
    EksMgmtIamRoleArn:
      Type: String
      Description: The AWS IAM role arn that will have manage access to EKS
      Default: ""
    KubernetesVersion:
      Description: "The Kubernetes Version"
      Type: String
      Default: "1.18"
      AllowedValues:
        - "1.18"
    CreateVPC:
      Description: "Set to true if you want to create VPC"
      Type: String
      Default: "true"
      AllowedValues:
        - "true"
        - "false"
    CreateElasticSearch:
      Description: "Set to true if you want to create ElasticSearch"
      Type: String
      Default: "true"
      AllowedValues:
        - "true"
        - "false"
    CreateMySQL:
      Description: "Set to true if you want to create MySQL"
      Type: String
      Default: "true"
      AllowedValues:
        - "true"
        - "false"
    CreateMSK:
      Description: "Set to true if you want to create MSK"
      Type: String
      Default: "true"
      AllowedValues:
        - "true"
        - "false"
    CreateEKS:
      Description: "Set to true if you want to create EKS"
      Type: String
      Default: "true"
      AllowedValues:
        - "true"
        - "false"
    CreateAdmin:
      Description: "Set to true if you want to create Admin"
      Type: String
      Default: "true"
      AllowedValues:
        - "true"
        - "false"
    CreatePrivateLink:
      Description: "Set to true if you want to create PrivateLink"
      Type: String
      Default: "false"
      AllowedValues:
        - "true"
        - "false"
    RemoveTempResources:
      Description: "Set to true if you don't want to keep admin provision host"
      Type: String
      Default: "true"
      AllowedValues:
        - "true"
        - "false"
    ESVolumeSize:
      Default: 50
      Description: Data Node Volume Size in GB
      Type: String
    ESDataNodeCount:
      Default: 3
      Type: String
    ESMasterNodeCount:
      Default: 3
      Type: String
    ESInstanceType:
      Type: "String"
      Default: "m5.large.elasticsearch"
      Description: "The type of EC2 instance to be launched for ElasticSearch Data Node"
      AllowedValues:
        - t3.small.elasticsearch
        - t3.large.elasticsearch
        - m5.large.elasticsearch
    ESMasterInstanceType:
      Type: "String"
      Default: "c5.large.elasticsearch"
      Description: "The type of EC2 instance to be launched for ElasticSearch Master Node"
      AllowedValues:
        - t3.small.elasticsearch
        - t3.large.elasticsearch
        - c5.large.elasticsearch
    ElasticsearchVersion:
      Type: "String"
      Default: "7.9"
      Description: "The Elasticsearch Version"
      AllowedValues:
        - 7.9
    DBInstanceClass:
      AllowedValues:
        - db.t3.small
        - db.t3.large
      ConstraintDescription: Must contain valid RDS instance type
      Default: db.t3.large
      Description: instance type for the Amazon Aurora
      Type: String
    EngineVersion:
      AllowedValues:
        - 5.7.mysql_aurora.2.09.1
      Default: 5.7.mysql_aurora.2.09.1
      Description: Aurora Engine Version
      Type: String
    MSKInstanceType:
      AllowedValues:
        - kafka.t3.small
        - kafka.t3.large
        - kafka.m5.large
      ConstraintDescription: Must contain valid MSK instance type
      Default: kafka.m5.large
      Description: EC2 instance type for the Amazon MSK instances
      Type: String
    KafkaVersion:
      AllowedValues:
        - 2.4.1.1
      Default: 2.4.1.1
      Description: Kafka version
      Type: String
    ControllerHostNetwork:
      Description: Enables Ingress Controller IAM
      Type: String
      Default: "Enabled"
      AllowedValues:
      - "Disabled"
      - "Enabled"
    ElbCertArn:
      ConstraintDescription: The Elastic Load Balancer Cert Arn can not be empty
      Type: String
      Default: ""
    ElbInboundCIDRs:
      ConstraintDescription: The Elastic Load Balancer Inbound CIDRs
      Type: String
      Default: "192.168.1.0/24,192.168.2.0/24"
    DomainName:
      Default: "datahub.a.b.c"
      Description: DataHub Domain Name
      Type: String
    KotsDomainName:
      Default: "kotsadm.a.b.c"
      Description: Kots Admin Domain Name
      Type: String
    KotsAdmNLBScheme:
      Description: Kots Admin Load Balancer Scheme
      Type: String
      Default: "internal"
      AllowedValues:
      - "internal"
      - "internet-facing"
    Application:
      Description: Application Name
      Type: String
      Default: "datahub-poc"
      AllowedValues:
      - "datahub-poc"
      - "datahub"
    ApplicationReleaseChannel:
      Description: Application Release Channel
      Type: String
      Default: "unstable"
      AllowedValues:
      - "unstable"
      - "beta"
      - "stable"



Conditions:
  isCreateVPC:           !Equals [!Ref CreateVPC, "true"]
  isCreateElasticSearch: !Equals [!Ref CreateElasticSearch, "true"]
  isCreateMySQL:         !Equals [!Ref CreateMySQL, "true"]
  isCreateMSK:           !Equals [!Ref CreateMSK, "true"]
  isCreateEKS:           !Equals [!Ref CreateEKS, "true"]
  isCreateAdmin:         !Equals [!Ref CreateAdmin, "true"]
  isCreatePrivateLink:   !Equals [!Ref CreatePrivateLink, "true"]

Resources:

    ESServiceRole:
        Condition: isCreateElasticSearch
        Type: 'AWS::IAM::ServiceLinkedRole'
        Properties:
            AWSServiceName: es.amazonaws.com
            Description: 'Service-linked role to give Amazon ES permissions to access your VPC'

    RDSSecret:
      Condition: isCreateMySQL
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: !Sub "/${Environment}/${AWS::StackName}/mysql/password"
        Description: !Sub "${Environment}/${AWS::StackName}: Secrets for Aurora MySQL"
        GenerateSecretString:
          SecretStringTemplate: '{"username": "admin"}'
          GenerateStringKey: password
          PasswordLength: 16
          ExcludeCharacters: '"@/\<>()$?+-`'
          ExcludePunctuation: true
        Tags:
          -
            Key: CloudFormation
            Value: "true"

    ESSecret:
      Condition: isCreateElasticSearch
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: !Sub "/${Environment}/${AWS::StackName}/elasticsearch/password"
        Description: !Sub "${Environment}/${AWS::StackName}: Secrets for ElasticSearch"
        GenerateSecretString:
          SecretStringTemplate: '{"username": "admin"}'
          GenerateStringKey: password
          PasswordLength: 16
          ExcludeCharacters: '"@/\<>()$?+-`'
        Tags:
          -
            Key: CloudFormation
            Value: "true"

    KOTSSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: !Sub "/${Environment}/${AWS::StackName}/kotsadm/password"
        Description: !Sub "${Environment}/${AWS::StackName}: Secrets for KOTS Admin"
        GenerateSecretString:
          SecretStringTemplate: '{"username": "admin"}'
          GenerateStringKey: password
          PasswordLength: 16
          ExcludeCharacters: '"@/\<>()$?+-`'
          ExcludePunctuation: true
        Tags:
          -
            Key: CloudFormation
            Value: "true"

    VPCStack:
      Condition: isCreateVPC
      Type: AWS::CloudFormation::Stack
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}"
          - Key: Component
            Value: !Sub "${AWS::StackName}-vpc"
        TemplateURL: !Sub "https://${TemplateBucketName}.s3.amazonaws.com/${Environment}/templates/nested/vpc.yaml"
        Parameters:
          AvailabilityZones: !Join [",", !Ref AvailabilityZones]
          PrivateSubnet1ACIDR: !Ref PrivateSubnet1CIDR
          PrivateSubnet2ACIDR: !Ref PrivateSubnet2CIDR
          PrivateSubnet3ACIDR: !Ref PrivateSubnet3CIDR
          PrivateSubnetATag1: kubernetes.io/role/internal-elb=1
          PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
          PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
          PublicSubnet3CIDR: !Ref PublicSubnet3CIDR
          PublicSubnetTag1: kubernetes.io/role/elb=1
          CreatePrivateSubnets: "true"
          VPCCIDR: !Ref VPCCIDR

    EC2LogGroup:
      Type: AWS::Logs::LogGroup
      Properties: 
        LogGroupName: !Sub "/${Environment}/${AWS::StackName}/ProvisionHost"

    ProvisionSecurityGroup:
      Condition: isCreateEKS
      Type: AWS::EC2::SecurityGroup
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-ProvisionHost-SG"
        GroupDescription: Enables SSH Access to Provision Hosts
        VpcId: !If [isCreateVPC, !GetAtt VPCStack.Outputs.VPCID, !Ref VPCID]

    NodeInstanceRole:
      Condition: isCreateEKS
      Type: AWS::IAM::Role
      Properties:
        Policies:
          - PolicyName: cloudwatch-logs-policy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Action:
                    - logs:CreateLogStream
                    - logs:GetLogEvents
                    - logs:PutLogEvents
                    - logs:DescribeLogGroups
                    - logs:DescribeLogStreams
                    - logs:PutRetentionPolicy
                    - logs:PutMetricFilter
                    - logs:CreateLogGroup
                  Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${EC2LogGroup}:*"
                  Effect: Allow
          - PolicyName: ebs-volume-policy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Action:
                    - ec2:AttachVolume
                    - ec2:DetachVolume
                  Resource: "arn:aws:ec2:*:*:volume/*"
                  Effect: Allow
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

    ElasticSearchStack:
      Condition: isCreateElasticSearch
      Type: AWS::CloudFormation::Stack
      DependsOn:
        - ESServiceRole
        - EKSClusterStack
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}"
          - Key: Component
            Value: Datahub-ElasticSearch
        TemplateURL: !Sub "https://${TemplateBucketName}.s3.amazonaws.com/${Environment}/templates/nested/elasticsearch.yaml"
        Parameters:
          # ES stack params
          VPCID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.VPCID, !Ref VPCID]
          PrivateSubnet1: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet1AID, !Ref PrivateSubnet1ID]
          PrivateSubnet2: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet2AID, !Ref PrivateSubnet2ID]
          PrivateSubnet3: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet3AID, !Ref PrivateSubnet3ID]
          NodeSecurityGroup: !GetAtt EKSPreRequsiteStack.Outputs.ControlPanelSecurityGroup
          ESDataNodeCount: !Ref ESDataNodeCount
          ESInstanceType: !Ref ESInstanceType
          ESVolumeSize: !Ref ESVolumeSize
          ESMasterNodeCount: !Ref ESMasterNodeCount
          ESMasterInstanceType: !Ref ESMasterInstanceType
          ESDomainName: !Sub "${AWS::StackName}"
          Environment: !Ref Environment
          ElasticsearchVersion: !Ref ElasticsearchVersion
          ESMasterUserPassword:
            Fn::Sub: "{{resolve:secretsmanager:${ESSecret}::password}}"

    MySQLStack:
      Condition: isCreateMySQL
      Type: AWS::CloudFormation::Stack
      DependsOn:
        - EKSClusterStack
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}"
          - Key: Component
            Value: Datahub-MySQL
        TemplateURL: !Sub "https://${TemplateBucketName}.s3.amazonaws.com/${Environment}/templates/nested/mysql.yaml"
        Parameters:
          # MySQL stack params
          AvailabilityZones: !Join [",", !Ref AvailabilityZones]
          VPCID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.VPCID, !Ref VPCID]
          DBSubnet1: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet1AID, !Ref PrivateSubnet1ID]
          DBSubnet2: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet2AID, !Ref PrivateSubnet2ID]
          DBSubnet3: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet3AID, !Ref PrivateSubnet3ID]
          NodeSecurityGroup: !GetAtt EKSPreRequsiteStack.Outputs.ControlPanelSecurityGroup
          MasterUser:
            Fn::Sub: "{{resolve:secretsmanager:${RDSSecret}::username}}"
          MasterUserPassword:
            Fn::Sub: "{{resolve:secretsmanager:${RDSSecret}::password}}"
          Environment: !Ref Environment
          DBClusterIdentifier: !Sub "${AWS::StackName}"
          DBInstanceClass: !Ref DBInstanceClass
          EngineVersion: !Ref EngineVersion

    MSKStack:
      Condition: isCreateMSK
      Type: AWS::CloudFormation::Stack
      DependsOn:
        - EKSClusterStack
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}"
          - Key: Component
            Value: Datahub-MSK
        TemplateURL: !Sub "https://${TemplateBucketName}.s3.amazonaws.com/${Environment}/templates/nested/msk.yaml"
        Parameters:
          # MSK stack params
          VPCID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.VPCID, !Ref VPCID]
          DBSubnet1: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet1AID, !Ref PrivateSubnet1ID]
          DBSubnet2: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet2AID, !Ref PrivateSubnet2ID]
          DBSubnet3: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet3AID, !Ref PrivateSubnet3ID]
          NodeSecurityGroup: !GetAtt EKSPreRequsiteStack.Outputs.ControlPanelSecurityGroup
          MSKClusterName: !Sub "${AWS::StackName}"
          Environment: !Ref Environment
          MSKInstanceType: !Ref MSKInstanceType
          KafkaVersion: !Ref KafkaVersion

    EKSPreRequsiteStack:
      Condition: isCreateEKS
      Type: AWS::CloudFormation::Stack
      DependsOn:
        - VPCStack
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}"
          - Key: Component
            Value: !Sub "${AWS::StackName}-EKSPreRequsite"
          - Key: KubernetesCluster
            Value: !Sub "${AWS::StackName}"
        TemplateURL: !Sub "https://${TemplateBucketName}.s3.amazonaws.com/${Environment}/templates/nested/eks-prerequsite.yaml"
        Parameters:
          VPCID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.VPCID, !Ref VPCID]
          TemplateBucketName: !Ref TemplateBucketName
          Environment: !Ref Environment
          ProvisionSecurityGroup: !Ref ProvisionSecurityGroup

    EKSClusterStack:
      Condition: isCreateEKS
      Type: AWS::CloudFormation::Stack
      DependsOn:
        - EKSPreRequsiteStack
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}"
          - Key: Component
            Value: !Sub "${AWS::StackName}-Provision"
          - Key: KubernetesCluster
            Value: !Sub "${AWS::StackName}"
        TemplateURL: !Sub "https://${TemplateBucketName}.s3.amazonaws.com/${Environment}/templates/nested/eks-cluster.yaml"
        Parameters:
          # Provision stack params
          VPCID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.VPCID, !Ref VPCID]
          PublicSubnet1ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PublicSubnet1ID, !Ref PublicSubnet1ID]
          PublicSubnet2ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PublicSubnet2ID, !Ref PublicSubnet2ID]
          PublicSubnet3ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PublicSubnet3ID, !Ref PublicSubnet3ID]
          PrivateSubnet1ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet1AID, !Ref PrivateSubnet1ID]
          PrivateSubnet2ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet2AID, !Ref PrivateSubnet2ID]
          PrivateSubnet3ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet3AID, !Ref PrivateSubnet3ID]
          ProvisionInstanceType: !Ref ProvisionInstanceType
          TemplateBucketName: !Ref TemplateBucketName
          Environment: !Ref Environment
          EC2LogGroup: !Ref EC2LogGroup
          ProvisionSecurityGroup: !Ref ProvisionSecurityGroup
          NodeSecurityGroup: !GetAtt EKSPreRequsiteStack.Outputs.ControlPanelSecurityGroup
          ControlPanelSecurityGroup: !GetAtt EKSPreRequsiteStack.Outputs.ControlPanelSecurityGroup
          EKSServiceRoleArn: !GetAtt EKSPreRequsiteStack.Outputs.EksServiceRoleArn
          NodeInstanceRoleArn: !GetAtt NodeInstanceRole.Arn
          EksMgmtIamRoleArn: !Ref EksMgmtIamRoleArn
          Environment: !Ref Environment
          KubernetesVersion: !Ref KubernetesVersion
          EKSClusterName: !Sub "${AWS::StackName}"
          RemoveTempResources: !Ref RemoveTempResources

    EKSNodeGroupStack:
      Condition: isCreateEKS
      Type: AWS::CloudFormation::Stack
      DependsOn:
        - EKSClusterStack
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}"
          - Key: Component
            Value: !Sub "${AWS::StackName}-Provision"
          - Key: KubernetesCluster
            Value: !Sub "${AWS::StackName}"
        TemplateURL: !Sub "https://${TemplateBucketName}.s3.amazonaws.com/${Environment}/templates/nested/eks-nodegroup.yaml"
        Parameters:
          # Provision stack params
          PrivateSubnet1ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet1AID, !Ref PrivateSubnet1ID]
          PrivateSubnet2ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet2AID, !Ref PrivateSubnet2ID]
          PrivateSubnet3ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet3AID, !Ref PrivateSubnet3ID]
          TemplateBucketName: !Ref TemplateBucketName
          Environment: !Ref Environment
          NodeSecurityGroup: !GetAtt EKSPreRequsiteStack.Outputs.ControlPanelSecurityGroup
          ControlPanelSecurityGroup: !GetAtt EKSPreRequsiteStack.Outputs.ControlPanelSecurityGroup
          NodeInstanceRole: !Ref NodeInstanceRole
          NodeInstanceRoleArn: !GetAtt NodeInstanceRole.Arn
          NodeInstanceType: !Ref NodeInstanceType
          MaxNumberOfNodes: !Ref MaxNumberOfNodes
          MinNumberOfNodes: !Ref MinNumberOfNodes
          DesiredNumberOfNodes: !Ref DesiredNumberOfNodes
          EKSNodeVolumeSize: !Ref EKSNodeVolumeSize
          EKSClusterName: !Sub "${AWS::StackName}"
          KubernetesVersion: !Ref KubernetesVersion
          Environment: !Sub "${Environment}"

    IngressControllerPreRequsiteStack:
      Type: AWS::CloudFormation::Stack
      DependsOn:
        - EKSNodeGroupStack
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}"
          - Key: Component
            Value: !Sub "${AWS::StackName}-IngressControllerPreRequsite"
        TemplateURL: !Sub "https://${TemplateBucketName}.s3.amazonaws.com/${Environment}/templates/nested/ingress-controller-prerequsite.yaml"
        Parameters:
          VpcId: !If [isCreateVPC, !GetAtt VPCStack.Outputs.VPCID, !Ref VPCID]
          EksClusterName: !Sub "${AWS::StackName}"
          Environment: !Sub "${Environment}"
          ControllerHostNetwork: !Ref ControllerHostNetwork

    AdminStack:
      Condition: isCreateAdmin
      Type: AWS::CloudFormation::Stack
      DependsOn: 
          - MSKStack
          - ElasticSearchStack
          - MySQLStack
          - EKSNodeGroupStack
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}"
          - Key: Component
            Value: !Sub "${AWS::StackName}-Admin"
        TemplateURL: !Sub "https://${TemplateBucketName}.s3.amazonaws.com/${Environment}/templates/nested/admin.yaml"
        Parameters:
          # Provision stack params
          Application: !Ref Application
          ApplicationReleaseChannel: !Ref ApplicationReleaseChannel
          VPCID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.VPCID, !Ref VPCID]
          PublicSubnet1ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PublicSubnet1ID, !Ref PublicSubnet1ID]
          PublicSubnet2ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PublicSubnet2ID, !Ref PublicSubnet2ID]
          PrivateSubnet1ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet1AID, !Ref PrivateSubnet1ID]
          PrivateSubnet2ID: !If [isCreateVPC, !GetAtt VPCStack.Outputs.PrivateSubnet2AID, !Ref PrivateSubnet2ID]
          ProvisionInstanceRole: !GetAtt EKSClusterStack.Outputs.ProvisionInstanceRole
          ProvisionInstanceProfile: !GetAtt EKSClusterStack.Outputs.ProvisionInstanceProfile
          ProvisionInstanceType: !Ref ProvisionInstanceType
          ProvisionSecurityGroup: !Ref ProvisionSecurityGroup
          NodeInstanceRoleArn: !GetAtt EKSClusterStack.Outputs.NodeInstanceRoleArn
          # EKS Worker Node stack params
          TemplateBucketName: !Ref TemplateBucketName
          Environment: !Ref Environment
          EC2LogGroup: !Ref EC2LogGroup
          EKSClusterName: !Sub "${AWS::StackName}"
          K8sNamespace: !Sub "${AWS::StackName}"
          # pass other stack info
          EKSProvisionAutoScalingGroup: !GetAtt EKSClusterStack.Outputs.EKSProvisionAutoScalingGroup
          DomainName: !Ref DomainName
          KotsDomainName: !Ref KotsDomainName
          KotsAdmNLBScheme: !Ref KotsAdmNLBScheme
          MySQLEndpoint: !GetAtt MySQLStack.Outputs.ClusterEndpoint
          ElasticSearchEndpoint: !GetAtt ElasticSearchStack.Outputs.DomainEndpoint
          MSKClusterName: !Sub "${AWS::StackName}"
          ElbCertArn: !Ref ElbCertArn
          ElbInboundCIDRs: !Ref ElbInboundCIDRs
          MasterUserPassword:
            Fn::Sub: "{{resolve:secretsmanager:${RDSSecret}::password}}"
          ESMasterUserPassword:
            Fn::Sub: "{{resolve:secretsmanager:${ESSecret}::password}}"
          KOTSUserPassword:
            Fn::Sub: "{{resolve:secretsmanager:${KOTSSecret}::password}}"
          Environment: !Sub "${Environment}"
          RemoveTempResources: !Ref RemoveTempResources

    PrivateLinkStack:
      Condition: isCreatePrivateLink
      Type: AWS::CloudFormation::Stack
      DependsOn:
        - AdminStack
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}"
          - Key: Component
            Value: !Sub "${AWS::StackName}-PrivateLink"
        TemplateURL: !Sub "https://${TemplateBucketName}.s3.amazonaws.com/${Environment}/templates/nested/privatelink.yaml"
        Parameters:
          Environment: !Sub "${Environment}"
          EKSClusterName: !Sub "${AWS::StackName}"

Outputs:
  # VPC stack
  VPCID:
    Value: !GetAtt VPCStack.Outputs.VPCID
    Condition: isCreateVPC

  # Provision stack
  ProvisionSubstackName:
    Value: !GetAtt EKSClusterStack.Outputs.SubstackName
    Condition: isCreateEKS
  ProvisionSecurityGroup:
    Value: !Ref ProvisionSecurityGroup
    Condition: isCreateEKS
  EKSProvisionLaunchConfiguration:
    Value: !GetAtt EKSClusterStack.Outputs.EKSProvisionLaunchConfiguration
    Condition: isCreateEKS
  EKSProvisionAutoScalingGroup:
    Value: !GetAtt EKSClusterStack.Outputs.EKSProvisionAutoScalingGroup
    Condition: isCreateEKS
  ProvisionInstanceRole:
    Value: !GetAtt EKSClusterStack.Outputs.ProvisionInstanceRole
    Condition: isCreateEKS
  ProvisionInstanceProfile:
    Value: !GetAtt EKSClusterStack.Outputs.ProvisionInstanceProfile
    Condition: isCreateEKS
  ProvisionInstanceRole:
    Value: !GetAtt EKSClusterStack.Outputs.ProvisionInstanceRole
    Condition: isCreateEKS
  EC2LogGroup:
    Value: !Ref EC2LogGroup
    Condition: isCreateEKS

  # ElasticSearch
  DomainEndpoint:
   Value: !GetAtt ElasticSearchStack.Outputs.DomainEndpoint
   Condition: isCreateElasticSearch
  

  # EKS Cluster
  ControlPanelSecurityGroup:
    Value: !GetAtt EKSPreRequsiteStack.Outputs.ControlPanelSecurityGroup
    Condition: isCreateEKS
  EksClusterName:
    Value: !GetAtt EKSClusterStack.Outputs.EksClusterName
    Condition: isCreateEKS
  EksServiceRoleArn:
    Value: !GetAtt EKSPreRequsiteStack.Outputs.EksServiceRoleArn
    Condition: isCreateEKS
  NodeInstanceRoleArn:
    Value: !GetAtt NodeInstanceRole.Arn
    Condition: isCreateEKS
  AvailabilityZones:
    Value: !Join [",", !Ref AvailabilityZones]
    Condition: isCreateVPC
